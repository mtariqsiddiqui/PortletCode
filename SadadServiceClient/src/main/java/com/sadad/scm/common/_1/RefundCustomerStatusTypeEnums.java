//
// Generated By:JAX-WS RI IBM 2.2.1-11/28/2011 08:28 AM(foreman)- (JAXB RI IBM 2.2.3-11/28/2011 06:21 AM(foreman)-)
//


package com.sadad.scm.common._1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for RefundCustomerStatusType_Enums.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="RefundCustomerStatusType_Enums">
 *   &lt;restriction base="{http://www.sadad.com/scm/Common/System/1.0}NC32_SType">
 *     &lt;enumeration value="Accepted"/>
 *     &lt;enumeration value="Pending"/>
 *     &lt;enumeration value="Rejected"/>
 *     &lt;enumeration value="Approved"/>
 *     &lt;enumeration value="Paid"/>
 *     &lt;enumeration value="ReadyForPayment"/>
 *     &lt;enumeration value="Expired"/>
 *     &lt;enumeration value="Cancelled"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "RefundCustomerStatusType_Enums")
@XmlEnum
public enum RefundCustomerStatusTypeEnums {

    @XmlEnumValue("Accepted")
    ACCEPTED("Accepted"),
    @XmlEnumValue("Pending")
    PENDING("Pending"),
    @XmlEnumValue("Rejected")
    REJECTED("Rejected"),
    @XmlEnumValue("Approved")
    APPROVED("Approved"),
    @XmlEnumValue("Paid")
    PAID("Paid"),
    @XmlEnumValue("ReadyForPayment")
    READY_FOR_PAYMENT("ReadyForPayment"),
    @XmlEnumValue("Expired")
    EXPIRED("Expired"),
    @XmlEnumValue("Cancelled")
    CANCELLED("Cancelled");
    private final String value;

    RefundCustomerStatusTypeEnums(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static RefundCustomerStatusTypeEnums fromValue(String v) {
        for (RefundCustomerStatusTypeEnums c: RefundCustomerStatusTypeEnums.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
